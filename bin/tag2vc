#!/bin/env python3
# -*- coding: utf-8 -*-

import re

def tag2vc(tag, rev):
    """Transform tag to VersionCode from google

    >>> tag2vc("abc", 0)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: invalid tag format (expecting 'MM.mm.pp(-rc.RR)')

    >>> tag2vc("1.0.0", 0)
    100000000
    >>> tag2vc("0.1.0", 0)
    1000000
    >>> tag2vc("0.0.2", 0)
    20000

    >>> tag2vc("0.0.2-rc.1", 0)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: Invalid rc upon a patch version

    >>> tag2vc("0.4.2-rc.1", 1)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: Invalid rc upon a patch version

    >>> tag2vc("0.4.0-rc.1", 0)
    3990100
    >>> tag2vc("4.0.0-rc.1", 0)
    399990100

    >>> tag2vc("2.3.99", 0)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: Invalid patch number (should be <= 98)

    >>> tag2vc("22.0.0", 0)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: Invalid major number (should be <= 21)


    >>> tag2vc("0.112.0", 0)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: Invalid minor number (should be <= 98)

    >>> tag2vc("1.2.1-rc.1", 0)   # doctest: +ELLIPSIS
    Traceback (most recent call last):
    ...
    ValueError: Invalid rc upon a patch version

    >>> tag2vc("4.2.17", 0)
    402170000
    >>> tag2vc("4.3.0-rc.1", 0)
    402990100
    >>> tag2vc("4.3.0", 0)
    403000000

    >>> tag2vc("3.9.17", 0)
    309170000
    >>> tag2vc("4.0.0-rc.1", 0)
    399990100
    >>> tag2vc("4.0.0", 0)
    400000000

    >>> tag2vc("3.9.17", 0) < tag2vc("3.9.17", 1) < tag2vc("3.9.98", 1) < tag2vc("4.0.0-rc.1", 0) < tag2vc("4.0.0", 0)
    True

    >>> tag2vc("1.0.0-rc.7", 1)
    99990701
    >>> tag2vc("4.32.17-rc.16", 3)
    Traceback (most recent call last):
    ...
    ValueError: Invalid rc upon a patch version
    >>> tag2vc("4.32.0-rc.16", 3)
    431991603
    >>> tag2vc("4.32.17", 3)
    432170003

    """
    m = re.match("^(?P<major>[0-9]+)\.(?P<minor>[0-9]+)\.(?P<patch>[0-9]+)(-rc.(?P<rc>[0-9]+))?$", tag)
    if not m:
        raise ValueError("invalid tag format (expecting 'MM.mm.pp(-rc.RR)')")
    dct = m.groupdict()
    major = int(dct["major"])
    minor = int(dct["minor"])
    patch = int(dct["patch"])
    rc = int(dct["rc"] or 0)

    ## Sanity checks
    if rc > 0 and patch > 0:
        raise ValueError("Invalid rc upon a patch version")

    if major >= 22:
        raise ValueError("Invalid major number (should be <= 21)")

    if minor >= 99:
        raise ValueError("Invalid minor number (should be <= 98)")

    if patch >= 99:
        raise ValueError("Invalid patch number (should be <= 98)")

    ## modification before output

    if rc != 0:
        patch = 99
        if minor == 0:
            if major == 0:
                raise ValueError("Can't do a release candidate on 0.0")
            major -= 1
            minor = 99
        else:
            minor -= 1

    s = "%02d%02d%02d%02d%02d" % (major, minor, patch, rc, rev)

    return int(s)



if __name__ == "__main__":
    import sys
    try:
        print("%s" % tag2vc(sys.argv[1], int(sys.argv[2])))
    except ValueError as e:
        print("Error: %s" % e)
        exit(1)
    exit(0)